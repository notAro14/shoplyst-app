datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  list          List[]
  sharedList    ListOnUser[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model List {
  id          String            @unique @default(cuid())
  name        String
  description String?
  ownerId     String
  owner       User              @relation(fields: [ownerId], references: [id])
  products    ProductsOnLists[]
  sharedWith  ListOnUser[]
  isArchived  Boolean           @default(false)
}

model ListOnUser {
  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([listId, userId])
}

model Category {
  id       Int       @unique @default(autoincrement())
  name     String
  products Product[]
}

model Product {
  id         Int               @unique @default(autoincrement())
  name       String
  lists      ProductsOnLists[]
  categoryId Int?
  category   Category?         @relation(fields: [categoryId], references: [id])
}

enum ArticleStatus {
  PURCHASED
  READY
}

model ProductsOnLists {
  productId Int
  product   Product       @relation(fields: [productId], references: [id])
  listId    String
  list      List          @relation(fields: [listId], references: [id], onDelete: Cascade)
  status    ArticleStatus @default(READY)
  detail    String?

  @@unique([productId, listId])
}
